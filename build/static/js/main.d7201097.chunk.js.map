{"version":3,"sources":["services/cards.js","services/decks.js","components/Card.js","components/CardList.js","components/NavBar.js","components/DraftCardList.js","components/DraftDeck.js","components/SavedDeck.js","components/SavedDecksList.js","App.js","index.js"],"names":["baseUrl","services_cards","getAll","axios","get","then","response","data","getColor","color","getById","id","getBooster","set","getSets","decks","deckId","create","newDeck","deckName","post","Card","_ref","card","backToCardList","react_default","a","createElement","className","onClick","src","imageUrl","alt","name","setName","rarity","text","CardList","cards","showCardForMobile","showImageOrCard","mouseOver","mouseOut","showLinkForId","map","index","key","onMouseOver","onMouseOut","style","NavBar","getCardsWithColor","playDraft","showDraftDeck","sets","draftDeck","savedDecksAmount","showSavedDecks","onChange","defaultValue","hidden","value","code","length","DraftCardList","boosters","addCardToDeck","boosterIndex","showDraftingInfo","toggleDraftingInfo","DraftDeck","cardsLeft","getBackToDrafting","saveDeck","deckIsSaved","toggleShowSaveDeckForm","showSavedDeckForm","changeSavedDeckName","savedDeckName","showDeckHasBeenSavedText","sort","b","colorsA","colors","i","cmc","colorsB","placeholder","type","autoFocus","SavedDeck","savedDeck","SavedDecksList","savedDecks","showSavedDeckById","created_at","deck","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","cardService","setState","showCard","hoverImageUrl","cardListColor","savedDeckToShow","draftSet","document","getElementById","loading","booster","state","concat","draftRound","shuffleNewBoosters","touchsupport","cardIndex","boosterIndexIncrement","filter","x","removedIndex","Math","floor","random","showDraftDeckWithoutEvent","deckService","deckCards","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","alert","setTimeout","foundDecks","stop","_x","apply","arguments","target","bind","assertThisInitialized","window","navigator","maxTouchPoints","msMaxTouchPoints","setsArray","releaseDate","reduce","accumulator","_this2","components_NavBar","components_SavedDeck","components_SavedDecksList","components_DraftDeck","components_CardList","components_DraftCardList","components_Card","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.d7201097.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://api.magicthegathering.io/v1'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getColor = (color) => {\r\n    const request = axios.get(baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true&colors=' + color)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getById = (id) => {\r\n    const request = axios.get(baseUrl + '/cards/' + id)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getBooster = (set) => {\r\n    const request = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getSets = () => {\r\n    // allegiance|guilds|2019|dominaria|rivals|ixalan|amonkhet|devastation|\r\n    const request = axios.get(baseUrl + '/sets?name=alpha')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nexport default { getAll, getColor, getById, getBooster, getSets }","import axios from 'axios'\r\nconst baseUrl = '/api/decks'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst getById = (deckId) => {\r\n    const request = axios.get(baseUrl + '/' + deckId)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newDeck, deckName) => {\r\n    const request = axios.post(baseUrl, newDeck, deckName)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, getById, create }","import React from 'react'\r\n\r\nconst Card = ({ card, backToCardList }) => {\r\n  return (\r\n    <div className=\"showCard\">\r\n        <div>\r\n          <button onClick={backToCardList} className=\"btn buttonDefaultPurpleText\">Back</button>\r\n        </div>\r\n\r\n        <img src={card.imageUrl} alt=\"card_image\" />\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Name:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.name}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Set:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.setName}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Rarity:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.rarity}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row cardText\">\r\n          <div className=\"col-sm-12 title-cell\">\r\n            {card.text}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nconst CardList = ({ cards, showCardForMobile, showImageOrCard, mouseOver, mouseOut, color, showLinkForId }) => {\r\n\r\n  return (\r\n    <div className=\"cardList\">\r\n        <ul className=\"cardListUl list-group\">\r\n            {\r\n                cards.map(function(card, index) {\r\n                    if (card.id === showLinkForId) {\r\n                        return(\r\n                            <li\r\n                                key={index}\r\n                                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                                onMouseOver={mouseOver(card.imageUrl)}\r\n                                onMouseOut={mouseOut}\r\n                                className=\"cardListLi list-group-item\"\r\n                                style={{color: color}}\r\n                            >\r\n                                {card.name}\r\n                                <br />\r\n                                <button onClick={showCardForMobile(card.id)} className=\"btn showLinkForIdButton\">Show</button>\r\n                            </li>\r\n                        )\r\n                    } else {\r\n                        return(\r\n                            <li\r\n                                key={index}\r\n                                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                                onMouseOver={mouseOver(card.imageUrl)}\r\n                                onMouseOut={mouseOut}\r\n                                className=\"cardListLi list-group-item\"\r\n                                style={{color: color}}\r\n                            >\r\n                                {card.name}\r\n                            </li>\r\n                        )\r\n                    }\r\n                    \r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst NavBar = ({ getCardsWithColor, playDraft, showDraftDeck, sets, draftDeck, savedDecksAmount, showSavedDecks }) => {\r\n\r\n    return (\r\n        <div className=\"navBarElements\">\r\n            <div className=\"upperBtnRow\">\r\n                <button onClick={getCardsWithColor('white')} className='btn btn-default buttonWhite'>White</button>\r\n                <button onClick={getCardsWithColor('blue')} className='btn btn-default buttonBlue'>Blue</button>\r\n                <button onClick={getCardsWithColor('black')} className='btn btn-default buttonBlack'>Black</button>\r\n            </div>\r\n            <div className=\"lowerBtnRow\">\r\n                <button onClick={getCardsWithColor('red')} className='btn btn-default buttonRed'>Red</button>\r\n                <button onClick={getCardsWithColor('green')} className='btn btn-default buttonGreen'>Green</button>\r\n            </div>\r\n            <div className=\"draftSelectList\">\r\n                <select id=\"draft-select\" className=\"form-control\" onChange={playDraft}>\r\n                    <option defaultValue hidden>Draft</option>\r\n                    {sets.map(function(set, index) {\r\n                        return(\r\n                            <option value={set.code} key={index}>{set.name}</option>\r\n                        )\r\n                    })}\r\n                </select>\r\n            </div>\r\n\r\n            <button onClick={showSavedDecks} className='btn buttonShowSavedDecks'>Saved Decks ({savedDecksAmount})</button>\r\n\r\n            {draftDeck.length > 0\r\n            ?\r\n                <button onClick={showDraftDeck} className='btn buttonShowDraftedDeck'>Drafted Deck ({draftDeck.length})</button>\r\n            :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\n\r\nconst DraftCardList = ({ boosters, addCardToDeck, boosterIndex, showDraftingInfo, toggleDraftingInfo }) => {\r\n    return (\r\n        <div className=\"draftCardList\">\r\n            <div className=\"draftingInfo\">\r\n                <button onClick={toggleDraftingInfo} className=\"btn btn-default buttonDraftingInfo\">Info</button>\r\n\r\n                {showDraftingInfo\r\n                ?\r\n                    <div className=\"draftingInfoText\">\r\n                        <p>You and 7 computer players each have 3 boosters, each containing 15 cards.</p>\r\n                        <p>Everybody opens the first booster and picks one card (computers by random).</p>\r\n                        <p>After picking a card, you pass your booster with 14 cards and get a 14 card booster from other player and so on...</p>\r\n                        <p>When all 15 cards are picked, each player opens a new booster and repeat the previous process.</p>\r\n                        <p>After drafting all 3 boosters you should have a 45 card deck which you can save to the database.</p>\r\n                    </div>\r\n                :\r\n                    null\r\n                }\r\n            </div>\r\n\r\n            {boosters[boosterIndex].map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt=\"imageUrl\" key={index} className=\"draftCardImage cardImage\" onClick={addCardToDeck(card, boosterIndex, index)} />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraftCardList","import React from 'react'\r\n\r\nconst DraftDeck = ({ draftDeck, cardsLeft, getBackToDrafting, saveDeck, deckIsSaved, toggleShowSaveDeckForm, showSavedDeckForm, changeSavedDeckName, savedDeckName, showDeckHasBeenSavedText }) => {\r\n\r\n    draftDeck.sort(function(a, b) {\r\n        let colorsA = \"\"\r\n        if (a.colors) {\r\n            for (let i = 0; i < a.colors.length; i++) {\r\n                colorsA += a.colors[i]\r\n            }\r\n            colorsA += a.cmc\r\n        }\r\n        let colorsB = \"\"\r\n        if (b.colors) {\r\n            for (let i = 0; i < b.colors.length; i++) {\r\n                colorsB += b.colors[i]\r\n            }\r\n            colorsB += b.cmc\r\n        }\r\n        if (colorsA < colorsB) return -1\r\n        if (colorsA > colorsB) return 1\r\n        return 0;\r\n    })\r\n\r\n    return (\r\n        <div className=\"draftDeck\">\r\n        <div className=\"savedDeckNameDiv\">\r\n            {showDeckHasBeenSavedText\r\n            ?\r\n                <p className=\"goldenParagraph\">Deck {savedDeckName} has been saved!</p>\r\n            :\r\n                null\r\n            }\r\n        </div>\r\n\r\n        {cardsLeft\r\n        ?\r\n            <div>\r\n                <button onClick={getBackToDrafting} className=\"btn btn-default buttonDefaultPurpleText\">Back to drafting</button>\r\n            </div>\r\n        :\r\n            <div className=\"saveDeckDiv\">\r\n                {!deckIsSaved\r\n                ?\r\n                    <button onClick={toggleShowSaveDeckForm} className=\"btn btn-default buttonDefaultPurpleText\">Save Deck</button>\r\n                :\r\n                    null\r\n                }\r\n                \r\n                {showSavedDeckForm\r\n                ?\r\n                    <div className=\"saveDeckForm\">\r\n                        <input onChange={changeSavedDeckName} placeholder=\"Deck Name\" type=\"text\" id=\"changeSavedDeckNameInput\" autoFocus></input>\r\n                        <button onClick={saveDeck(draftDeck, savedDeckName)} className=\"btn saveDeckButton\">Save</button>\r\n                    </div>\r\n                :\r\n                    null\r\n                }\r\n            </div>\r\n        }\r\n\r\n            {draftDeck.map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt=\"imageUrl\" key={index} className=\"draftDeckCardImage cardImage\" />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraftDeck","import React from 'react'\r\n\r\nconst SavedDeck = ({ savedDeck }) => {\r\n\r\n    return (\r\n        <div className=\"draftDeck\">\r\n            <h1 className=\"savedDeckName\">{savedDeck.name}</h1>\r\n\r\n            {savedDeck.cards.map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt={card.name} key={index} className=\"savedDeckCardImage cardImage\" />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SavedDeck","import React from 'react'\r\n\r\nconst SavedDecksList = ({ savedDecks, showSavedDeckById }) => {\r\n\r\n    savedDecks.sort(function(a, b) {\r\n        if (a.created_at > b.created_at) return -1\r\n        if (a.created_at < b.created_at) return 1\r\n        return 0;\r\n    })\r\n\r\n    return (\r\n        <div className=\"savedDecksList\">\r\n            <ul className=\"savedDecksListUl list-group\">\r\n\r\n                {savedDecks.map(function(deck) {\r\n                    return (\r\n                        <li\r\n                            onClick={showSavedDeckById(deck.id)}\r\n                            key={deck.id}\r\n                            className=\"savedDecksListLi list-group-item\"\r\n                        >\r\n                            {deck.name}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SavedDecksList","import React, { Component } from 'react'\r\nimport cardService from './services/cards'\r\nimport deckService from './services/decks'\r\nimport Card from './components/Card'\r\nimport CardList from './components/CardList'\r\nimport NavBar from './components/NavBar'\r\nimport DraftCardList from './components/DraftCardList'\r\nimport DraftDeck from './components/DraftDeck'\r\nimport SavedDeck from './components/SavedDeck'\r\nimport SavedDecksList from './components/SavedDecksList'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // Bind functions\r\n    this.getCardsWithColor = this.getCardsWithColor.bind(this)\r\n    this.playDraft = this.playDraft.bind(this)\r\n    this.showImageOrCard = this.showImageOrCard.bind(this)\r\n    this.showCard = this.showCard.bind(this)\r\n    this.showCardForMobile = this.showCardForMobile.bind(this)\r\n    this.mouseOver = this.mouseOver.bind(this)\r\n    this.mouseOut = this.mouseOut.bind(this)\r\n    this.addCardToDeck = this.addCardToDeck.bind(this)\r\n    this.shuffleNewBoosters = this.shuffleNewBoosters.bind(this)\r\n    this.showDraftDeck = this.showDraftDeck.bind(this)\r\n    this.showDraftDeckWithoutEvent = this.showDraftDeckWithoutEvent.bind(this)\r\n    this.toggleDraftingInfo = this.toggleDraftingInfo.bind(this)\r\n    this.getBackToDrafting = this.getBackToDrafting.bind(this)\r\n    this.showSavedDecks = this.showSavedDecks.bind(this)\r\n    this.showSavedDeckById = this.showSavedDeckById.bind(this)\r\n    this.saveDeck = this.saveDeck.bind(this)\r\n    this.toggleShowSaveDeckForm = this.toggleShowSaveDeckForm.bind(this)\r\n    this.changeSavedDeckName = this.changeSavedDeckName.bind(this)\r\n    this.backToCardList = this.backToCardList.bind(this)\r\n\r\n    // Check if using mobile with touch\r\n    const touchsupport = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)\r\n    this.state = {\r\n      cards: [],\r\n      boosters: [],\r\n      draftDeck: [],\r\n      savedDecks: [],\r\n      sets: [],\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      loading: false,\r\n      showDraftingInfo: false,\r\n      showCard: null,\r\n      showSavedDeckForm: false,\r\n      showDeckHasBeenSavedText: false,\r\n      savedDeckToShow: null,\r\n      savedDeckName: null,\r\n      deckIsSaved: false,\r\n      cardsLeft: false,\r\n      draftSet: '',\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: 0,\r\n      savedDecksAmount: 0,\r\n      touchsupport: touchsupport\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await cardService\r\n      .getSets()\r\n      .then(response => {\r\n        const sets = response.sets.sort(function(a, b) {\r\n          if (a.releaseDate > b.releaseDate) return -1\r\n          if (a.releaseDate < b.releaseDate) return 1\r\n          return 0;\r\n        })\r\n        let setsArray = sets.reduce(function(accumulator, set) {\r\n          return(\r\n            set.booster\r\n            ?\r\n              accumulator.concat(set)\r\n            :\r\n              accumulator\r\n          )\r\n        }, [])\r\n        setsArray.sort((a, b) => a.releaseDate < b.releaseDate)\r\n        this.setState({\r\n          sets: setsArray\r\n        })\r\n      })\r\n\r\n    await deckService\r\n      .getAll()\r\n      .then(savedDecks => {\r\n        this.setState({\r\n          savedDecks: savedDecks,\r\n          savedDecksAmount: savedDecks.length\r\n        })\r\n      })\r\n  }\r\n\r\n  // Get 5 random cards with chosen color\r\n  getCardsWithColor = (color) => (event) => {\r\n    event.preventDefault()\r\n\r\n    cardService\r\n      .getColor(color)\r\n      .then(response => {\r\n        // Add cards to array in state and clear possible hovering settings\r\n        this.setState({\r\n          cards: response.cards,\r\n          showCard: null,\r\n          mouseOver: false,\r\n          showDraftDeck: false,\r\n          showSavedDecks: false,\r\n          showSavedDeckForm: false,\r\n          hoverImageUrl: '',\r\n          cardListColor: color,\r\n          showLinkForId: '',\r\n          savedDeckToShow: null,\r\n        })\r\n      })\r\n  }\r\n\r\n  // Get 8 boosters with 15 draft cards each for given set\r\n  playDraft = (event) => {\r\n    event.preventDefault()\r\n\r\n    const draftSet = document.getElementById('draft-select').value\r\n\r\n    // Show loading text while getting the boosters from API\r\n    this.setState({\r\n      loading: true,\r\n      deckIsSaved: false,\r\n      boosters: [],\r\n      draftSet: draftSet\r\n    })\r\n\r\n    // Change value back to default\r\n    document.getElementById(\"draft-select\").value = \"Draft\"\r\n\r\n    // Get 8 boosters\r\n    for (let i = 0; i < 8; i++) {\r\n      cardService\r\n        .getBooster(draftSet)\r\n        .then(response => {\r\n          const booster = [response.cards]\r\n          this.setState({\r\n            boosters: this.state.boosters.concat(booster),\r\n            loading: false\r\n          })\r\n        })\r\n    }\r\n\r\n    this.setState({\r\n      // Add draft cards to array in state and clear possible other settings\r\n      cards: [],\r\n      draftDeck: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      showSavedDeckForm: false,\r\n      showDraftingInfo: false,\r\n      cardsLeft: true,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: 1,\r\n      savedDeckToShow: null\r\n    })\r\n  }\r\n\r\n  shuffleNewBoosters = (draftRound) => {\r\n    // Show loading text while getting the boosters from API\r\n    this.setState({\r\n      boosters: [],\r\n      showDraftingInfo: false\r\n    })\r\n\r\n    // Get 8 boosters\r\n    for (let i = 0; i < 8; i++) {\r\n      cardService\r\n      .getBooster(this.state.draftSet)\r\n      .then(response => {\r\n        const booster = [response.cards]\r\n        this.setState({\r\n          boosters: this.state.boosters.concat(booster),\r\n          cardsLeft: true\r\n        })\r\n      })\r\n    }\r\n\r\n    this.setState({\r\n      // Add draft cards to array in state and clear possible other settings\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: draftRound,\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  // Hovering is not possible if using mobile, so when clicked with mobile, display image and button for show view\r\n  showImageOrCard = (id, imageUrl) => (event) => {\r\n    event.preventDefault()\r\n\r\n    // If not using mobile and clicked on a card name, show the card\r\n    if (!this.state.touchsupport) {\r\n      this.showCard(id)\r\n    } else {\r\n      // For mobile, if this card is already clicked, show the card\r\n      if (this.state.hoverImageUrl === imageUrl) {\r\n        this.setState({\r\n          mouseOver: false,\r\n          showDraftDeck: false,\r\n          showCard: null,\r\n          showLinkForId: ''\r\n        })\r\n      // If first click, show the hover image\r\n      } else {\r\n        this.setState({\r\n          mouseOver: true,\r\n          showDraftDeck: false,\r\n          showSavedDecks: false,\r\n          hoverImageUrl: imageUrl,\r\n          showCard: null,\r\n          showLinkForId: id\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // Two almost duplicate methods because other one needs event.preventDefault() and this won't work with it\r\n  showCard = (id) => {\r\n    // Getting image takes a while, so show Loading... and hide it when image is retreived\r\n    this.setState({\r\n      loading: true,\r\n      hoverImageUrl: '',\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      showLinkForId: ''\r\n    })\r\n\r\n    cardService\r\n      .getById(id)\r\n      .then(response => {\r\n        this.setState({\r\n          showCard: response.card,\r\n          loading: false\r\n        })\r\n      })\r\n  }\r\n\r\n  // Without preventing default event (clicked from button) this activates straight away when clicked on a card name\r\n  showCardForMobile = (id) => (event) => {\r\n    event.preventDefault()\r\n    // Getting image takes a while, so show Loading... and hide it when image is retreived\r\n    this.setState({\r\n      loading: true,\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: ''\r\n    })\r\n\r\n    cardService\r\n      .getById(id)\r\n      .then(response => {\r\n        this.setState({\r\n          showCard: response.card,\r\n          loading: false\r\n        })\r\n      })\r\n  }\r\n\r\n  // On desktop show card image when hovering the name\r\n  mouseOver = (imageUrl) => (event) => {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.touchsupport) {\r\n\r\n      this.setState({\r\n        mouseOver: true,\r\n        hoverImageUrl: imageUrl,\r\n      })\r\n    }\r\n  }\r\n\r\n  // Hide the card image when not hovering the name\r\n  mouseOut = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.touchsupport) {\r\n\r\n      this.setState({\r\n        mouseOver: false,\r\n        hoverImageUrl: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  addCardToDeck = (card, boosterIndex, cardIndex) => (event) => {\r\n    event.preventDefault()\r\n\r\n    let boosterIndexIncrement = this.state.boosterIndex\r\n    if (boosterIndexIncrement === 7) {\r\n      boosterIndexIncrement = 0\r\n    } else {\r\n      boosterIndexIncrement += 1\r\n    }\r\n\r\n    // Remove chosen card from booster. Using index over ID because there might be duplicate cards in boosters\r\n    const boosters = this.state.boosters\r\n\r\n    // Remove one random card from every booster\r\n    boosters.map(function(booster, index) {\r\n      if (boosterIndex === index) {\r\n        booster = booster.filter((x, i) => i !== cardIndex)\r\n        return boosters[index] = booster\r\n      } else {\r\n        const removedIndex = Math.floor(Math.random() * Math.floor(booster.length))\r\n        booster = booster.filter((x, i) => i !== removedIndex)\r\n        return boosters[index] = booster\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      draftDeck: this.state.draftDeck.concat(card),\r\n      boosters: boosters,\r\n      boosterIndex: boosterIndexIncrement,\r\n      showDraftingInfo: false\r\n    })\r\n\r\n    if (this.state.boosters[0].length === 0 && this.state.draftRound < 3) {\r\n      this.setState({\r\n        boosterIndex: 0,\r\n        cardsLeft: false\r\n      })\r\n      this.shuffleNewBoosters(this.state.draftRound + 1)\r\n    } else if (this.state.boosters[0].length === 0 && this.state.draftRound === 3) {\r\n      this.showDraftDeckWithoutEvent()\r\n    }\r\n  }\r\n\r\n  // Button to show drafted cards\r\n  showDraftDeck = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: true,\r\n      showSavedDeckForm: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: '',\r\n      cardListColor: '',\r\n      showSavedDecks: false,\r\n      savedDeckToShow: null\r\n    })\r\n  }\r\n\r\n  // Cannot call upper function from this file, needs event to work\r\n  showDraftDeckWithoutEvent = () => {\r\n    this.setState({\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: true,\r\n      showSavedDeckForm: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: '',\r\n      cardListColor: '',\r\n      showSavedDecks: false,\r\n      cardsLeft: false,\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  // Button to get back to drafting from viewing your so far drafted deck\r\n  getBackToDrafting = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showDraftDeck: false,\r\n      showSavedDeckForm: false\r\n    })\r\n  }\r\n\r\n  toggleDraftingInfo = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.state.showDraftingInfo\r\n    ?\r\n      this.setState({ showDraftingInfo: false })\r\n    :\r\n      this.setState({ showDraftingInfo: true })\r\n  }\r\n\r\n  // Show drafted decks that were saved to database\r\n  showSavedDecks = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showSavedDecks: true,\r\n      cards: [],\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDeckForm: false,\r\n      loading: false,\r\n      showDraftingInfo: false,\r\n      showCard: null,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      savedDeckToShow: null\r\n    })\r\n  }\r\n\r\n  // Show selected saved deck\r\n  showSavedDeckById = (deckId) => (event) => {\r\n    event.preventDefault()\r\n\r\n    deckService\r\n      .getById(deckId)\r\n      .then(savedDeckToShow => {\r\n        this.setState({\r\n          showSavedDecks: false,\r\n          showSavedDeckForm: false,\r\n          savedDeckToShow: savedDeckToShow\r\n        })\r\n      })\r\n  }\r\n\r\n  // Save complete deck to database\r\n  saveDeck = (deckCards, deckName) => async (event) => {\r\n    event.preventDefault()\r\n\r\n    if (!deckName) {\r\n      alert(\"Name your deck!\")\r\n    } else {\r\n\r\n      const newDeck = {\"name\":deckName, \"cards\":deckCards}\r\n\r\n      await deckService\r\n        .create(newDeck)\r\n        .then(deck => {\r\n          this.setState({\r\n            deckIsSaved: true,\r\n            savedDeckName: deck.name,\r\n            showSavedDeckForm: false,\r\n            showDeckHasBeenSavedText: true\r\n          })\r\n        })\r\n        setTimeout(() => {\r\n          this.setState({\r\n            savedDeckName: null,\r\n            showDeckHasBeenSavedText: false\r\n          })\r\n        }, 3000)\r\n\r\n      // Get the saved decks from database\r\n      // If there are more than 10 saved decks, backend automatically deletes the oldest ones\r\n      await deckService\r\n        .getAll()\r\n        .then(foundDecks => {\r\n          this.setState({\r\n            savedDecks: foundDecks,\r\n            savedDecksAmount: foundDecks.length\r\n          })\r\n        })\r\n    }\r\n  }\r\n\r\n  toggleShowSaveDeckForm = (event) => {\r\n    event.preventDefault()\r\n\r\n    if (this.state.showSavedDeckForm === false) {\r\n      this.setState({\r\n        showSavedDeckForm: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n        showSavedDeckForm: false\r\n      })\r\n    }\r\n  }\r\n\r\n  changeSavedDeckName = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      savedDeckName: event.target.value\r\n    })\r\n  }\r\n\r\n  backToCardList = (event) => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showCard: null\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          getCardsWithColor={this.getCardsWithColor}\r\n          playDraft={this.playDraft}\r\n          sets={this.state.sets}\r\n          draftDeck={this.state.draftDeck}\r\n          showDraftDeck={this.showDraftDeck}\r\n          savedDecksAmount={this.state.savedDecks.length}\r\n          showSavedDecks={this.showSavedDecks}\r\n        />\r\n\r\n        {this.state.savedDeckToShow !== null\r\n        ?\r\n          <SavedDeck\r\n            savedDeck={this.state.savedDeckToShow}\r\n          />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.showSavedDecks\r\n        ?\r\n          <SavedDecksList\r\n            savedDecks={this.state.savedDecks}\r\n            showSavedDeckById={this.showSavedDeckById}\r\n          />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.loading\r\n        ?\r\n          <div className=\"loading\">\r\n            <div className=\"loadingContent\">\r\n              <p>Loading...</p>\r\n            </div>\r\n          </div>\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.showDraftDeck\r\n        ?\r\n          <DraftDeck\r\n            draftDeck={this.state.draftDeck}\r\n            cardsLeft={this.state.cardsLeft}\r\n            getBackToDrafting={this.getBackToDrafting}\r\n            saveDeck={this.saveDeck}\r\n            deckIsSaved={this.state.deckIsSaved}\r\n            toggleShowSaveDeckForm={this.toggleShowSaveDeckForm}\r\n            showSavedDeckForm={this.state.showSavedDeckForm}\r\n            changeSavedDeckName={this.changeSavedDeckName}\r\n            savedDeckName={this.state.savedDeckName}\r\n            showDeckHasBeenSavedText={this.state.showDeckHasBeenSavedText}\r\n          />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.cards.length > 0 && !this.state.showCard && !this.state.loading\r\n        ?\r\n          <CardList\r\n            cards={this.state.cards}\r\n            showCardForMobile={this.showCardForMobile}\r\n            showImageOrCard={this.showImageOrCard}\r\n            mouseOver={this.mouseOver}\r\n            mouseOut={this.mouseOut}\r\n            color={this.state.cardListColor}\r\n            showLinkForId={this.state.showLinkForId}\r\n          />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.boosters.length > 0 && !this.state.showDraftDeck && !this.state.showSavedDecks &&\r\n        !this.state.savedDeckToShow && this.state.cards.length === 0 && !this.state.showCard\r\n        ?\r\n          <DraftCardList\r\n            boosters={this.state.boosters}\r\n            addCardToDeck={this.addCardToDeck}\r\n            boosterIndex={this.state.boosterIndex}\r\n            showDraftingInfo={this.state.showDraftingInfo}\r\n            toggleDraftingInfo={this.toggleDraftingInfo}\r\n          />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.showCard !== null\r\n        ?\r\n          <Card card={this.state.showCard} backToCardList={this.backToCardList} />\r\n        :\r\n          null\r\n        }\r\n\r\n        {this.state.mouseOver\r\n        ?\r\n          <div className=\"hoverImage\">\r\n            <img src={this.state.hoverImageUrl} alt=\"imageUrl\" className=\"cardImage\" />\r\n          </div>\r\n        :\r\n          null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './styles.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}