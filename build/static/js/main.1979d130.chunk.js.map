{"version":3,"sources":["services/cards.js","services/decks.js","components/Card.js","components/CardList.js","components/NavBar.js","components/DraftCardList.js","components/DraftDeck.js","components/SavedDeck.js","components/SavedDecksList.js","App.js","index.js"],"names":["baseUrl","services_cards","getAll","axios","get","then","response","data","getColor","color","getById","id","getBooster","set","getSets","decks","deckId","create","newDeck","deckName","post","Card","_ref","card","react_default","a","createElement","className","src","imageUrl","alt","name","setName","rarity","text","CardList","cards","showCardForMobile","showImageOrCard","mouseOver","mouseOut","showLinkForId","map","index","key","onClick","onMouseOver","onMouseOut","style","NavBar","getCardsWithColor","playDraft","showDraftDeck","sets","draftDeck","savedDecksAmount","showSavedDecks","onChange","defaultValue","hidden","value","code","length","DraftCardList","boosters","addCardToDeck","boosterIndex","showDraftingInfo","toggleDraftingInfo","DraftDeck","cardsLeft","getBackToDrafting","saveDeck","deckIsSaved","toggleShowSaveDeckForm","showSavedDeckForm","changeSavedDeckName","savedDeckName","showDeckHasBeenSavedText","sort","b","colorsA","colors","i","cmc","colorsB","placeholder","type","autoFocus","SavedDeck","savedDeck","SavedDecksList","savedDecks","showSavedDeckById","created_at","deck","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","preventDefault","cardService","setState","showCard","hoverImageUrl","cardListColor","savedDeckToShow","draftSet","document","getElementById","loadingDraft","booster","state","concat","draftRound","shuffleNewBoosters","touchsupport","cardIndex","boosterIndexIncrement","filter","x","removedIndex","Math","floor","random","showDraftDeckWithoutEvent","deckService","deckCards","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","alert","setTimeout","foundDecks","stop","_x","apply","arguments","target","bind","assertThisInitialized","window","navigator","maxTouchPoints","msMaxTouchPoints","setsArray","releaseDate","push","_this2","components_NavBar","components_SavedDeck","components_SavedDecksList","components_DraftDeck","components_CardList","components_DraftCardList","components_Card","Component","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.1979d130.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://api.magicthegathering.io/v1'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getColor = (color) => {\r\n    const request = axios.get(baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true&colors=' + color)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getById = (id) => {\r\n    const request = axios.get(baseUrl + '/cards/' + id)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getBooster = (set) => {\r\n    const request = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst getSets = () => {\r\n    const request = axios.get(baseUrl + '/sets?name=Guilds of Ravnica|Core Set 2019|Dominaria|Rivals of Ixalan|Ixalan|Amonkhet|Hour of Devastation|alpha')\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nexport default { getAll, getColor, getById, getBooster, getSets }","import axios from 'axios'\r\nconst baseUrl = '/api/decks'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst getById = (deckId) => {\r\n    const request = axios.get(baseUrl + '/' + deckId)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newDeck, deckName) => {\r\n    const request = axios.post(baseUrl, newDeck, deckName)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, getById, create }","import React from 'react'\r\n\r\nconst Card = ({ card }) => {\r\n  return (\r\n    <div className=\"showCard\">\r\n        <img src={card.imageUrl} alt=\"imageUrl\" />\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Name:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.name}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Set:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.setName}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row showCardRow\">\r\n          <div className=\"col-sm-4 title-cell showCardLeftColumn\">\r\n            Rarity:\r\n          </div>\r\n          <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n            {card.rarity}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row cardText\">\r\n          <div className=\"col-sm-12 title-cell\">\r\n            {card.text}\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\nconst CardList = ({ cards, showCardForMobile, showImageOrCard, mouseOver, mouseOut, color, showLinkForId }) => {\r\n\r\n  return (\r\n    <div className=\"cardList\">\r\n        <ul className=\"cardListUl list-group\">\r\n            {\r\n                cards.map(function(card, index) {\r\n                    if (card.id === showLinkForId) {\r\n                        return(\r\n                            <li\r\n                                key={index}\r\n                                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                                onMouseOver={mouseOver(card.imageUrl)}\r\n                                onMouseOut={mouseOut}\r\n                                className=\"cardListLi list-group-item\"\r\n                                style={{color: color}}\r\n                            >\r\n                                {card.name}\r\n                                <br />\r\n                                <button onClick={showCardForMobile(card.id)} className=\"btn showLinkForIdButton\">Show</button>\r\n                            </li>\r\n                        )\r\n                    } else {\r\n                        return(\r\n                            <li\r\n                                key={index}\r\n                                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                                onMouseOver={mouseOver(card.imageUrl)}\r\n                                onMouseOut={mouseOut}\r\n                                className=\"cardListLi list-group-item\"\r\n                                style={{color: color}}\r\n                            >\r\n                                {card.name}\r\n                            </li>\r\n                        )\r\n                    }\r\n                    \r\n                })\r\n            }\r\n        </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst NavBar = ({ getCardsWithColor, playDraft, showDraftDeck, sets, draftDeck, savedDecksAmount, showSavedDecks }) => {\r\n\r\n    return (\r\n        <div className=\"navBarElements\">\r\n            <button onClick={getCardsWithColor('white')} className='btn btn-default buttonWhite'>White</button>\r\n            <button onClick={getCardsWithColor('blue')} className='btn btn-default buttonBlue'>Blue</button>\r\n            <button onClick={getCardsWithColor('black')} className='btn btn-default buttonBlack'>Black</button>\r\n            <button onClick={getCardsWithColor('red')} className='btn btn-default buttonRed'>Red</button>\r\n            <button onClick={getCardsWithColor('green')} className='btn btn-default buttonGreen'>Green</button>\r\n            <select id=\"draft-select\" className=\"form-control\" onChange={playDraft}>\r\n                <option defaultValue hidden>Draft</option>\r\n                {sets.map(function(set, index) {\r\n                    return(\r\n                        <option value={set.code} key={index}>{set.name}</option>\r\n                    )\r\n                })}\r\n            </select>\r\n\r\n            <button onClick={showSavedDecks} className='btn btn-secondary buttonDefaultBlackText'>Saved Decks ({savedDecksAmount})</button>\r\n\r\n            {draftDeck.length > 0\r\n            ?\r\n                <button onClick={showDraftDeck} className='btn btn-dark buttonDefaultBlackText'>Drafted Deck ({draftDeck.length})</button>\r\n            :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\n\r\nconst DraftCardList = ({ boosters, addCardToDeck, boosterIndex, showDraftingInfo, toggleDraftingInfo }) => {\r\n    return (\r\n        <div className=\"draftCardList\">\r\n            <div className=\"draftingInfo\">\r\n                <button onClick={toggleDraftingInfo} className=\"btn btn-default buttonDraftingInfo\">Info</button>\r\n\r\n                {showDraftingInfo\r\n                ?\r\n                    <div className=\"draftingInfoText\">\r\n                        <p>You and 7 computer players each have 3 boosters, each containing 15 cards.</p>\r\n                        <p>Everybody opens the first booster and picks one card (computers by random).</p>\r\n                        <p>After picking a card, you pass your booster with 14 cards and get a 14 card booster from other player and so on...</p>\r\n                        <p>When all 15 cards are picked, each player opens a new booster and repeat the previous process.</p>\r\n                        <p>After drafting all 3 boosters you should have a 45 card deck which you can save to the database.</p>\r\n                    </div>\r\n                :\r\n                    null\r\n                }\r\n            </div>\r\n\r\n            {boosters[boosterIndex].map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt=\"imageUrl\" key={index} className=\"draftCardImage cardImage\" onClick={addCardToDeck(card, boosterIndex, index)} />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraftCardList","import React from 'react'\r\n\r\nconst DraftDeck = ({ draftDeck, cardsLeft, getBackToDrafting, saveDeck, deckIsSaved, toggleShowSaveDeckForm, showSavedDeckForm, changeSavedDeckName, savedDeckName, showDeckHasBeenSavedText }) => {\r\n\r\n    draftDeck.sort(function(a, b) {\r\n        let colorsA = \"\"\r\n        if (a.colors) {\r\n            for (let i = 0; i < a.colors.length; i++) {\r\n                colorsA += a.colors[i]\r\n            }\r\n            colorsA += a.cmc\r\n        }\r\n        let colorsB = \"\"\r\n        if (b.colors) {\r\n            for (let i = 0; i < b.colors.length; i++) {\r\n                colorsB += b.colors[i]\r\n            }\r\n            colorsB += b.cmc\r\n        }\r\n        if (colorsA < colorsB) return -1\r\n        if (colorsA > colorsB) return 1\r\n        return 0;\r\n    })\r\n\r\n    return (\r\n        <div className=\"draftDeck\">\r\n        <div className=\"savedDeckNameDiv\">\r\n            {showDeckHasBeenSavedText\r\n            ?\r\n                <p className=\"goldenParagraph\">Deck {savedDeckName} has been saved!</p>\r\n            :\r\n                null\r\n            }\r\n        </div>\r\n\r\n        {cardsLeft\r\n        ?\r\n            <button onClick={getBackToDrafting} className=\"btn btn-default buttonDefaultPurpleText\">Back to drafting</button>\r\n        :\r\n            <div className=\"saveDeckDiv\">\r\n                {!deckIsSaved\r\n                ?\r\n                    <button onClick={toggleShowSaveDeckForm} className=\"btn btn-default buttonDefaultPurpleText\">Save Deck</button>\r\n                :\r\n                    null\r\n                }\r\n                \r\n                {showSavedDeckForm\r\n                ?\r\n                    <div className=\"saveDeckForm\">\r\n                        <input onChange={changeSavedDeckName} placeholder=\"Deck Name\" type=\"text\" id=\"changeSavedDeckNameInput\" autoFocus></input>\r\n                        <button onClick={saveDeck(draftDeck, savedDeckName)} className=\"btn btn-default saveDeckButton buttonDefaultBlackText\">Save</button>\r\n                    </div>\r\n                :\r\n                    null\r\n                }\r\n            </div>\r\n        }\r\n\r\n        <h1 id=\"draftedDeckTitle\">Drafted Deck</h1>\r\n            {draftDeck.map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt=\"imageUrl\" key={index} className=\"draftDeckCardImage cardImage\" />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraftDeck","import React from 'react'\r\n\r\nconst SavedDeck = ({ savedDeck }) => {\r\n\r\n    return (\r\n        <div className=\"draftDeck\">\r\n            <h1 className=\"savedDeckName\">{savedDeck.name}</h1>\r\n\r\n            {savedDeck.cards.map(function(card, index) {\r\n                return (\r\n                    <img src={card.imageUrl} alt={card.name} key={index} className=\"savedDeckCardImage cardImage\" />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SavedDeck","import React from 'react'\r\n\r\nconst SavedDecksList = ({ savedDecks, showSavedDeckById }) => {\r\n\r\n    savedDecks.sort(function(a, b) {\r\n        if (a.created_at > b.created_at) return -1\r\n        if (a.created_at < b.created_at) return 1\r\n        return 0;\r\n    })\r\n\r\n    return (\r\n        <div className=\"savedDecksList\">\r\n            <ul className=\"savedDecksListUl list-group\">\r\n\r\n                {savedDecks.map(function(deck) {\r\n                    return (\r\n                        <li\r\n                            onClick={showSavedDeckById(deck.id)}\r\n                            key={deck.id}\r\n                            className=\"savedDecksListLi list-group-item\"\r\n                        >\r\n                            {deck.name}\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SavedDecksList","import React, { Component } from 'react'\nimport cardService from './services/cards'\nimport deckService from './services/decks'\nimport Card from './components/Card'\nimport CardList from './components/CardList'\nimport NavBar from './components/NavBar'\nimport DraftCardList from './components/DraftCardList'\nimport DraftDeck from './components/DraftDeck'\nimport SavedDeck from './components/SavedDeck'\nimport SavedDecksList from './components/SavedDecksList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    // Bind functions\n    this.getCardsWithColor = this.getCardsWithColor.bind(this)\n    this.playDraft = this.playDraft.bind(this)\n    this.showImageOrCard = this.showImageOrCard.bind(this)\n    this.showCard = this.showCard.bind(this)\n    this.showCardForMobile = this.showCardForMobile.bind(this)\n    this.mouseOver = this.mouseOver.bind(this)\n    this.mouseOut = this.mouseOut.bind(this)\n    this.addCardToDeck = this.addCardToDeck.bind(this)\n    this.shuffleNewBoosters = this.shuffleNewBoosters.bind(this)\n    this.showDraftDeck = this.showDraftDeck.bind(this)\n    this.showDraftDeckWithoutEvent = this.showDraftDeckWithoutEvent.bind(this)\n    this.toggleDraftingInfo = this.toggleDraftingInfo.bind(this)\n    this.getBackToDrafting = this.getBackToDrafting.bind(this)\n    this.showSavedDecks = this.showSavedDecks.bind(this)\n    this.showSavedDeckById = this.showSavedDeckById.bind(this)\n    this.saveDeck = this.saveDeck.bind(this)\n    this.toggleShowSaveDeckForm = this.toggleShowSaveDeckForm.bind(this)\n    this.changeSavedDeckName = this.changeSavedDeckName.bind(this)\n\n    // Check if using mobile with touch\n    const touchsupport = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0) || (navigator.msMaxTouchPoints > 0)\n    this.state = {\n      cards: [],\n      boosters: [],\n      draftDeck: [],\n      savedDecks: [],\n      sets: [],\n      mouseOver: false,\n      showDraftDeck: false,\n      showSavedDecks: false,\n      loadingDraft: false,\n      showDraftingInfo: false,\n      showCard: null,\n      showSavedDeckForm: false,\n      showDeckHasBeenSavedText: false,\n      savedDeckToShow: null,\n      savedDeckName: null,\n      deckIsSaved: false,\n      cardsLeft: false,\n      draftSet: '',\n      hoverImageUrl: '',\n      cardListColor: '',\n      showLinkForId: '',\n      boosterIndex: 0,\n      draftRound: 0,\n      savedDecksAmount: 0,\n      touchsupport: touchsupport\n    }\n  }\n\n  async componentDidMount() {\n    let setsArray = []\n    await cardService\n      .getSets()\n      .then(response => {\n        const sets = response.sets.sort(function(a, b) {\n          if (a.releaseDate > b.releaseDate) return -1\n          if (a.releaseDate < b.releaseDate) return 1\n          return 0;\n        })\n        sets.map(function(set) {\n          return(\n            set.booster\n            ?\n              setsArray.push(set)\n            :\n              null\n          )\n        })\n        setsArray.sort((a, b) => a.releaseDate < b.releaseDate)\n        this.setState({\n          sets: setsArray\n        })\n      })\n\n    await deckService\n      .getAll()\n      .then(savedDecks => {\n        this.setState({\n          savedDecks: savedDecks,\n          savedDecksAmount: savedDecks.length\n        })\n      })\n  }\n\n  // Get 5 random cards with chosen color\n  getCardsWithColor = (color) => (event) => {\n    event.preventDefault()\n\n    cardService\n      .getColor(color)\n      .then(response => {\n        // Add cards to array in state and clear possible hovering settings\n        this.setState({\n          cards: response.cards,\n          showCard: null,\n          mouseOver: false,\n          showDraftDeck: false,\n          showSavedDecks: false,\n          showSavedDeckForm: false,\n          hoverImageUrl: '',\n          cardListColor: color,\n          showLinkForId: '',\n          savedDeckToShow: null,\n        })\n      })\n  }\n\n  // Get 8 boosters with 15 draft cards each for given set\n  playDraft = (event) => {\n    event.preventDefault()\n\n    const draftSet = document.getElementById('draft-select').value\n\n    // Show loading text while getting the boosters from API\n    this.setState({\n      loadingDraft: true,\n      deckIsSaved: false,\n      boosters: [],\n      draftSet: draftSet\n    })\n\n    // Change value back to default\n    document.getElementById(\"draft-select\").value = \"Draft\"\n\n    // Get 8 boosters\n    for (let i = 0; i < 8; i++) {\n      cardService\n      .getBooster(draftSet)\n      .then(response => {\n        const booster = [response.cards]\n        this.setState({\n          boosters: this.state.boosters.concat(booster),\n          loadingDraft: false\n        })\n      })\n    }\n\n    this.setState({\n      // Add draft cards to array in state and clear possible other settings\n      cards: [],\n      draftDeck: [],\n      showCard: null,\n      mouseOver: false,\n      showDraftDeck: false,\n      showSavedDecks: false,\n      showSavedDeckForm: false,\n      showDraftingInfo: false,\n      cardsLeft: true,\n      hoverImageUrl: '',\n      cardListColor: '',\n      showLinkForId: '',\n      boosterIndex: 0,\n      draftRound: 1,\n      savedDeckToShow: null\n    })\n  }\n\n  shuffleNewBoosters = (draftRound) => {\n    // Show loading text while getting the boosters from API\n    this.setState({\n      loadingDraft: true,\n      boosters: [],\n      showDraftingInfo: false\n    })\n\n    // Get 8 boosters\n    for (let i = 0; i < 8; i++) {\n      cardService\n      .getBooster(this.state.draftSet)\n      .then(response => {\n        const booster = [response.cards]\n        this.setState({\n          boosters: this.state.boosters.concat(booster),\n          cardsLeft: true,\n          loadingDraft: false\n        })\n      })\n    }\n\n    this.setState({\n      // Add draft cards to array in state and clear possible other settings\n      cards: [],\n      showCard: null,\n      mouseOver: false,\n      hoverImageUrl: '',\n      cardListColor: '',\n      showLinkForId: '',\n      boosterIndex: 0,\n      draftRound: draftRound\n    })\n  }\n\n  // Hovering is not possible if using mobile, so when clicked with mobile, display image and button for show view\n  showImageOrCard = (id, imageUrl) => (event) => {\n    event.preventDefault()\n\n    // If not using mobile and clicked on a card name, show the card\n    if (!this.state.touchsupport) {\n      this.showCard(id)\n    } else {\n      // For mobile, if this card is already clicked, show the card\n      if (this.state.hoverImageUrl === imageUrl) {\n        this.setState({\n          cards: [],\n          mouseOver: false,\n          showDraftDeck: false,\n          showCard: null,\n          cardListColor: '',\n          showLinkForId: ''\n        })\n      // If first click, show the hover image\n      } else {\n        this.setState({\n          mouseOver: true,\n          showDraftDeck: false,\n          showSavedDecks: false,\n          hoverImageUrl: imageUrl,\n          showCard: null,\n          showLinkForId: id\n        })\n      }\n    }\n  }\n\n  // Two almost duplicate methods because other one needs event.preventDefault() and this won't work with it\n  showCard = (id) => {\n    cardService\n      .getById(id)\n      .then(response => {\n        this.setState({\n          cards: [],\n          showCard: response.card,\n          mouseOver: false,\n          showDraftDeck: false,\n          showSavedDecks: false,\n          hoverImageUrl: '',\n          showLinkForId: ''\n        })\n      })\n  }\n\n  // Without preventing default event (clicked from button) this activates straight away when clicked on a card name\n  showCardForMobile = (id) => (event) => {\n    event.preventDefault()\n\n    cardService\n      .getById(id)\n      .then(response => {\n        this.setState({\n          cards: [],\n          showCard: response.card,\n          mouseOver: false,\n          showDraftDeck: false,\n          showSavedDecks: false,\n          hoverImageUrl: '',\n          showLinkForId: ''\n        })\n      })\n  }\n\n  // On desktop show card image when hovering the name\n  mouseOver = (imageUrl) => (event) => {\n    event.preventDefault()\n\n    if (!this.state.touchsupport) {\n\n      this.setState({\n        mouseOver: true,\n        hoverImageUrl: imageUrl,\n      })\n    }\n  }\n\n  // Hide the card image when not hovering the name\n  mouseOut = (event) => {\n    event.preventDefault()\n\n    if (!this.state.touchsupport) {\n\n      this.setState({\n        mouseOver: false,\n        hoverImageUrl: ''\n      })\n    }\n  }\n\n  addCardToDeck = (card, boosterIndex, cardIndex) => (event) => {\n    event.preventDefault()\n\n    let boosterIndexIncrement = this.state.boosterIndex\n    if (boosterIndexIncrement === 7) {\n      boosterIndexIncrement = 0\n    } else {\n      boosterIndexIncrement += 1\n    }\n\n    // Remove chosen card from booster. Using index over ID because there might be duplicate cards in boosters\n    const boosters = this.state.boosters\n\n    // Remove one random card from every booster\n    boosters.map(function(booster, index) {\n      if (boosterIndex === index) {\n        booster = booster.filter((x, i) => i !== cardIndex)\n        return boosters[index] = booster\n      } else {\n        const removedIndex = Math.floor(Math.random() * Math.floor(booster.length))\n        booster = booster.filter((x, i) => i !== removedIndex)\n        return boosters[index] = booster\n      }\n    })\n\n    this.setState({\n      draftDeck: this.state.draftDeck.concat(card),\n      boosters: boosters,\n      boosterIndex: boosterIndexIncrement,\n      showDraftingInfo: false\n    })\n\n    if (this.state.boosters[0].length === 0 && this.state.draftRound < 3) {\n      this.setState({\n        boosterIndex: 0,\n        cardsLeft: false\n      })\n      this.shuffleNewBoosters(this.state.draftRound + 1)\n    } else if (this.state.boosters[0].length === 0 && this.state.draftRound === 3) {\n      this.showDraftDeckWithoutEvent()\n    }\n  }\n\n  // Button to show drafted cards\n  showDraftDeck = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      cards: [],\n      showCard: null,\n      mouseOver: false,\n      showDraftDeck: true,\n      showSavedDeckForm: false,\n      hoverImageUrl: '',\n      showLinkForId: '',\n      cardListColor: '',\n      showSavedDecks: false,\n      savedDeckToShow: null\n    })\n  }\n\n  // Cannot call upper function from this file, needs event to work\n  showDraftDeckWithoutEvent = () => {\n    this.setState({\n      cards: [],\n      showCard: null,\n      mouseOver: false,\n      showDraftDeck: true,\n      showSavedDeckForm: false,\n      hoverImageUrl: '',\n      showLinkForId: '',\n      cardListColor: '',\n      showSavedDecks: false,\n      cardsLeft: false\n    })\n  }\n\n  // Button to get back to drafting from viewing your so far drafted deck\n  getBackToDrafting = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      showDraftDeck: false,\n      showSavedDeckForm: false\n    })\n  }\n\n  toggleDraftingInfo = (event) => {\n    event.preventDefault()\n\n    this.state.showDraftingInfo\n    ?\n      this.setState({ showDraftingInfo: false })\n    :\n      this.setState({ showDraftingInfo: true })\n  }\n\n  // Show drafted decks that were saved to database\n  showSavedDecks = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      showSavedDecks: true,\n      cards: [],\n      mouseOver: false,\n      showDraftDeck: false,\n      showSavedDeckForm: false,\n      loadingDraft: false,\n      showDraftingInfo: false,\n      showCard: null,\n      hoverImageUrl: '',\n      cardListColor: '',\n      showLinkForId: '',\n      savedDeckToShow: null\n    })\n  }\n\n  // Show selected saved deck\n  showSavedDeckById = (deckId) => (event) => {\n    event.preventDefault()\n\n    deckService\n      .getById(deckId)\n      .then(savedDeckToShow => {\n        this.setState({\n          showSavedDecks: false,\n          showSavedDeckForm: false,\n          savedDeckToShow: savedDeckToShow\n        })\n      })\n  }\n\n  // Save complete deck to database\n  saveDeck = (deckCards, deckName) => async (event) => {\n    event.preventDefault()\n\n    if (!deckName) {\n      alert(\"Name your deck!\")\n    } else {\n\n      const newDeck = {\"name\":deckName, \"cards\":deckCards}\n\n      await deckService\n        .create(newDeck)\n        .then(deck => {\n          this.setState({\n            deckIsSaved: true,\n            savedDeckName: deck.name,\n            showSavedDeckForm: false,\n            showDeckHasBeenSavedText: true\n          })\n        })\n        setTimeout(() => {\n          this.setState({\n            savedDeckName: null,\n            showDeckHasBeenSavedText: false\n          })\n        }, 3000)\n\n      // Get the saved decks from database\n      // If there are more than 10 saved decks, backend automatically deletes the oldest ones\n      await deckService\n        .getAll()\n        .then(foundDecks => {\n          this.setState({\n            savedDecks: foundDecks,\n            savedDecksAmount: foundDecks.length\n          })\n        })\n    }\n  }\n\n  toggleShowSaveDeckForm = (event) => {\n    event.preventDefault()\n\n    if (this.state.showSavedDeckForm === false) {\n      this.setState({\n        showSavedDeckForm: true\n      })\n    } else {\n      this.setState({\n        showSavedDeckForm: false\n      })\n    }\n  }\n\n  changeSavedDeckName = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      savedDeckName: event.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar\n          getCardsWithColor={this.getCardsWithColor}\n          playDraft={this.playDraft}\n          sets={this.state.sets}\n          draftDeck={this.state.draftDeck}\n          showDraftDeck={this.showDraftDeck}\n          savedDecksAmount={this.state.savedDecks.length}\n          showSavedDecks={this.showSavedDecks}\n        />\n\n        {this.state.savedDeckToShow !== null\n        ?\n          <SavedDeck\n            savedDeck={this.state.savedDeckToShow}\n          />\n        :\n          null\n        }\n\n        {this.state.showSavedDecks\n        ?\n          <SavedDecksList\n            savedDecks={this.state.savedDecks}\n            showSavedDeckById={this.showSavedDeckById}\n          />\n        :\n          null\n        }\n\n        {this.state.loadingDraft\n        ?\n          <div>\n            <p id=\"loadingDraftInfo\">Loading...</p>\n          </div>\n        :\n          null\n        }\n\n        {this.state.showDraftDeck\n        ?\n          <DraftDeck\n            draftDeck={this.state.draftDeck}\n            cardsLeft={this.state.cardsLeft}\n            getBackToDrafting={this.getBackToDrafting}\n            saveDeck={this.saveDeck}\n            deckIsSaved={this.state.deckIsSaved}\n            toggleShowSaveDeckForm={this.toggleShowSaveDeckForm}\n            showSavedDeckForm={this.state.showSavedDeckForm}\n            changeSavedDeckName={this.changeSavedDeckName}\n            savedDeckName={this.state.savedDeckName}\n            showDeckHasBeenSavedText={this.state.showDeckHasBeenSavedText}\n          />\n        :\n          null\n        }\n\n        {this.state.cards.length > 0\n        ?\n          <CardList\n            cards={this.state.cards}\n            showCardForMobile={this.showCardForMobile}\n            showImageOrCard={this.showImageOrCard}\n            mouseOver={this.mouseOver}\n            mouseOut={this.mouseOut}\n            color={this.state.cardListColor}\n            showLinkForId={this.state.showLinkForId}\n          />\n        :\n          null\n        }\n\n        {this.state.boosters.length > 0 && !this.state.showDraftDeck && !this.state.showSavedDecks &&\n        !this.state.savedDeckToShow && this.state.cards.length === 0 && !this.state.showCard\n        ?\n          <DraftCardList\n            boosters={this.state.boosters}\n            addCardToDeck={this.addCardToDeck}\n            boosterIndex={this.state.boosterIndex}\n            showDraftingInfo={this.state.showDraftingInfo}\n            toggleDraftingInfo={this.toggleDraftingInfo}\n          />\n        :\n          null\n        }\n\n        {this.state.showCard !== null\n        ?\n          <Card card={this.state.showCard} />\n        :\n          null\n        }\n\n        {this.state.mouseOver\n        ?\n          <div className=\"hoverImage\">\n            <img src={this.state.hoverImageUrl} alt=\"imageUrl\" className=\"cardImage\" />\n          </div>\n        :\n          null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}