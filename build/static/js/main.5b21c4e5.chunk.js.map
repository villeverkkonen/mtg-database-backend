{"version":3,"sources":["services/cards.js","services/decks.js","components/Card.js","components/CardList.js","components/NavBar.js","components/DraftCardList.js","components/DraftDeck.js","components/SavedDeck.js","components/SavedDecksList.js","components/Loading.js","App.js","index.js"],"names":["baseUrl","services_cards","getAll","axios","get","then","response","data","getColor","color","getById","id","getDraftBoosters","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","set","booster1","booster2","booster3","booster4","booster5","booster6","booster7","booster8","wrap","_context","prev","next","Promise","all","boosters","abrupt","sent","stop","_x","apply","this","arguments","getSets","decks","deckId","create","newDeck","deckName","post","Card","card","backToCardList","react_default","createElement","className","onClick","src","imageUrl","alt","name","setName","rarity","text","CardList","cards","showCardForMobile","showImageOrCard","mouseOver","mouseOut","showLinkForId","map","index","key","onMouseOver","onMouseOut","style","NavBar","getCardsWithColor","playDraft","showDraftDeck","sets","draftDeck","savedDecksAmount","showSavedDecks","onChange","defaultValue","hidden","value","code","length","DraftCardList","addCardToDeck","boosterIndex","showDraftingInfo","toggleDraftingInfo","DraftDeck","cardsLeft","getBackToDrafting","saveDeck","deckIsSaved","toggleShowSaveDeckForm","showSavedDeckForm","changeSavedDeckName","savedDeckName","showDeckHasBeenSavedText","sort","b","colorsA","colors","i","cmc","colorsB","placeholder","type","autoFocus","SavedDeck","savedDeck","SavedDecksList","savedDecks","showSavedDeckById","created_at","deck","Loading","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","modifyLoadingText","bind","assertThisInitialized","state","loadingText","amountOfDots","dotsIncreasing","loadingTextVisible","interval","setInterval","clearInterval","setState","Component","App","event","preventDefault","loading","cardService","showCard","hoverImageUrl","cardListColor","savedDeckToShow","draftSet","draftBoosters","document","getElementById","booster","push","draftRound","shuffleNewBoosters","_ref2","_callee2","_context2","_x2","touchsupport","cardIndex","boosterIndexIncrement","filter","x","removedIndex","Math","floor","random","concat","showDraftDeckWithoutEvent","deckService","deckCards","_ref3","_callee3","_context3","alert","setTimeout","foundDecks","_x3","target","window","navigator","maxTouchPoints","msMaxTouchPoints","setsArray","releaseDate","reduce","accumulator","_this2","components_NavBar","components_SavedDeck","components_SavedDecksList","components_Loading","components_DraftDeck","components_CardList","components_DraftCardList","components_Card","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.5b21c4e5.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'https://api.magicthegathering.io/v1'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(\r\n    baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true'\r\n  )\r\n  return request.then(response => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nconst getColor = color => {\r\n  const request = axios.get(\r\n    baseUrl + '/cards?contains=imageUrl&pageSize=5&random=true&colors=' + color\r\n  )\r\n  return request.then(response => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nconst getById = id => {\r\n  const request = axios.get(baseUrl + '/cards/' + id)\r\n  return request.then(response => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nconst getDraftBoosters = async set => {\r\n  const booster1 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster2 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster3 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster4 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster5 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster6 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster7 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  const booster8 = axios.get(baseUrl + '/sets/' + set + '/booster')\r\n  return await Promise.all([\r\n    booster1,\r\n    booster2,\r\n    booster3,\r\n    booster4,\r\n    booster5,\r\n    booster6,\r\n    booster7,\r\n    booster8\r\n  ]).then(boosters => {\r\n    return boosters\r\n  })\r\n}\r\n\r\nconst getSets = () => {\r\n  // throne|allegiance|guilds|2019|dominaria|rivals|amonkhet|amonkhet|devastation|\r\n  const request = axios.get(baseUrl + '/sets?name=alpha|beta')\r\n  return request.then(response => {\r\n    return response.data\r\n  })\r\n}\r\n\r\nexport default {\r\n  getAll,\r\n  getColor,\r\n  getById,\r\n  getDraftBoosters,\r\n  getSets\r\n}\r\n","import axios from 'axios'\r\nconst baseUrl = '/api/decks'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst getById = deckId => {\r\n  const request = axios.get(baseUrl + '/' + deckId)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newDeck, deckName) => {\r\n  const request = axios.post(baseUrl, newDeck, deckName)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, getById, create }\r\n","import React from 'react'\r\n\r\nconst Card = ({ card, backToCardList }) => {\r\n  return (\r\n    <div className=\"showCard\">\r\n      <div>\r\n        <button\r\n          onClick={backToCardList}\r\n          className=\"btn buttonDefaultPurpleText\"\r\n        >\r\n          Back\r\n        </button>\r\n      </div>\r\n\r\n      <img src={card.imageUrl} alt=\"card_image\" />\r\n\r\n      <div className=\"row showCardRow\">\r\n        <div className=\"col-sm-4 title-cell showCardLeftColumn\">Name:</div>\r\n        <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n          {card.name}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row showCardRow\">\r\n        <div className=\"col-sm-4 title-cell showCardLeftColumn\">Set:</div>\r\n        <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n          {card.setName}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row showCardRow\">\r\n        <div className=\"col-sm-4 title-cell showCardLeftColumn\">Rarity:</div>\r\n        <div className=\"col-sm-8 data-cell showCardRightColumn\">\r\n          {card.rarity}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row cardText\">\r\n        <div className=\"col-sm-12 title-cell\">{card.text}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\n\r\nconst CardList = ({\r\n  cards,\r\n  showCardForMobile,\r\n  showImageOrCard,\r\n  mouseOver,\r\n  mouseOut,\r\n  color,\r\n  showLinkForId\r\n}) => {\r\n  return (\r\n    <div className=\"cardList\">\r\n      <ul className=\"cardListUl list-group\">\r\n        {cards.map(function(card, index) {\r\n          if (card.id === showLinkForId) {\r\n            return (\r\n              <li\r\n                key={index}\r\n                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                onMouseOver={mouseOver(card.imageUrl)}\r\n                onMouseOut={mouseOut}\r\n                className=\"cardListLi list-group-item\"\r\n                style={{ color: color }}\r\n              >\r\n                {card.name}\r\n                <br />\r\n                <button\r\n                  onClick={showCardForMobile(card.id)}\r\n                  className=\"btn showLinkForIdButton\"\r\n                >\r\n                  Show\r\n                </button>\r\n              </li>\r\n            )\r\n          } else {\r\n            return (\r\n              <li\r\n                key={index}\r\n                onClick={showImageOrCard(card.id, card.imageUrl)}\r\n                onMouseOver={mouseOver(card.imageUrl)}\r\n                onMouseOut={mouseOut}\r\n                className=\"cardListLi list-group-item\"\r\n                style={{ color: color }}\r\n              >\r\n                {card.name}\r\n              </li>\r\n            )\r\n          }\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst NavBar = ({\r\n  getCardsWithColor,\r\n  playDraft,\r\n  showDraftDeck,\r\n  sets,\r\n  draftDeck,\r\n  savedDecksAmount,\r\n  showSavedDecks\r\n}) => {\r\n  return (\r\n    <div className=\"navBarElements\">\r\n      <div className=\"upperBtnRow\">\r\n        <button\r\n          onClick={getCardsWithColor('white')}\r\n          className=\"btn btn-default buttonWhite\"\r\n        >\r\n          White\r\n        </button>\r\n        <button\r\n          onClick={getCardsWithColor('blue')}\r\n          className=\"btn btn-default buttonBlue\"\r\n        >\r\n          Blue\r\n        </button>\r\n        <button\r\n          onClick={getCardsWithColor('black')}\r\n          className=\"btn btn-default buttonBlack\"\r\n        >\r\n          Black\r\n        </button>\r\n      </div>\r\n      <div className=\"lowerBtnRow\">\r\n        <button\r\n          onClick={getCardsWithColor('red')}\r\n          className=\"btn btn-default buttonRed\"\r\n        >\r\n          Red\r\n        </button>\r\n        <button\r\n          onClick={getCardsWithColor('green')}\r\n          className=\"btn btn-default buttonGreen\"\r\n        >\r\n          Green\r\n        </button>\r\n      </div>\r\n      <div className=\"draftSelectList\">\r\n        <select id=\"draft-select\" className=\"form-control\" onChange={playDraft}>\r\n          <option defaultValue hidden>\r\n            Draft\r\n          </option>\r\n          {sets.map(function(set, index) {\r\n            return (\r\n              <option value={set.code} key={index}>\r\n                {set.name}\r\n              </option>\r\n            )\r\n          })}\r\n        </select>\r\n      </div>\r\n\r\n      <button onClick={showSavedDecks} className=\"btn buttonShowSavedDecks\">\r\n        Saved Decks ({savedDecksAmount})\r\n      </button>\r\n\r\n      {draftDeck.length > 0 ? (\r\n        <button onClick={showDraftDeck} className=\"btn buttonShowDraftedDeck\">\r\n          Drafted Deck ({draftDeck.length})\r\n        </button>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react'\r\n\r\nconst DraftCardList = ({\r\n  boosters,\r\n  addCardToDeck,\r\n  boosterIndex,\r\n  showDraftingInfo,\r\n  toggleDraftingInfo\r\n}) => {\r\n  return (\r\n    <div className=\"draftCardList\">\r\n      <div className=\"draftingInfo\">\r\n        <button\r\n          onClick={toggleDraftingInfo}\r\n          className=\"btn btn-default buttonDraftingInfo\"\r\n        >\r\n          Info\r\n        </button>\r\n\r\n        {showDraftingInfo ? (\r\n          <div className=\"draftingInfoText\">\r\n            <p>\r\n              You and 7 computer players each have 3 boosters, each containing\r\n              15 cards.\r\n            </p>\r\n            <p>\r\n              Everybody opens the first booster and picks one card (computers by\r\n              random).\r\n            </p>\r\n            <p>\r\n              After picking a card, you pass your booster with 14 cards and get\r\n              a 14 card booster from other player and so on...\r\n            </p>\r\n            <p>\r\n              When all 15 cards are picked, each player opens a new booster and\r\n              repeat the previous process.\r\n            </p>\r\n            <p>\r\n              After drafting all 3 boosters you should have a 45 card deck which\r\n              you can save to the database.\r\n            </p>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n\r\n      {boosters[boosterIndex].map(function(card, index) {\r\n        return (\r\n          <img\r\n            src={card.imageUrl}\r\n            alt=\"imageUrl\"\r\n            key={index}\r\n            className=\"draftCardImage cardImage\"\r\n            onClick={addCardToDeck(card, boosterIndex, index)}\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DraftCardList\r\n","import React from 'react'\r\n\r\nconst DraftDeck = ({\r\n  draftDeck,\r\n  cardsLeft,\r\n  getBackToDrafting,\r\n  saveDeck,\r\n  deckIsSaved,\r\n  toggleShowSaveDeckForm,\r\n  showSavedDeckForm,\r\n  changeSavedDeckName,\r\n  savedDeckName,\r\n  showDeckHasBeenSavedText\r\n}) => {\r\n  draftDeck.sort(function(a, b) {\r\n    let colorsA = ''\r\n    if (a.colors) {\r\n      for (let i = 0; i < a.colors.length; i++) {\r\n        colorsA += a.colors[i]\r\n      }\r\n      colorsA += a.cmc\r\n    }\r\n    let colorsB = ''\r\n    if (b.colors) {\r\n      for (let i = 0; i < b.colors.length; i++) {\r\n        colorsB += b.colors[i]\r\n      }\r\n      colorsB += b.cmc\r\n    }\r\n    if (colorsA < colorsB) return -1\r\n    if (colorsA > colorsB) return 1\r\n    return 0\r\n  })\r\n\r\n  return (\r\n    <div className=\"draftDeck\">\r\n      <div className=\"savedDeckNameDiv\">\r\n        {showDeckHasBeenSavedText ? (\r\n          <p className=\"goldenParagraph\">\r\n            Deck {savedDeckName} has been saved!\r\n          </p>\r\n        ) : null}\r\n      </div>\r\n\r\n      {cardsLeft ? (\r\n        <div>\r\n          <button\r\n            onClick={getBackToDrafting}\r\n            className=\"btn btn-default buttonDefaultPurpleText\"\r\n          >\r\n            Back to drafting\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"saveDeckDiv\">\r\n          {!deckIsSaved ? (\r\n            <button\r\n              onClick={toggleShowSaveDeckForm}\r\n              className=\"btn btn-default buttonDefaultPurpleText\"\r\n            >\r\n              Save Deck\r\n            </button>\r\n          ) : null}\r\n\r\n          {showSavedDeckForm ? (\r\n            <div className=\"saveDeckForm\">\r\n              <input\r\n                onChange={changeSavedDeckName}\r\n                placeholder=\"Deck Name\"\r\n                type=\"text\"\r\n                id=\"changeSavedDeckNameInput\"\r\n                autoFocus\r\n              ></input>\r\n              <button\r\n                onClick={saveDeck(draftDeck, savedDeckName)}\r\n                className=\"btn saveDeckButton\"\r\n              >\r\n                Save\r\n              </button>\r\n            </div>\r\n          ) : null}\r\n        </div>\r\n      )}\r\n\r\n      {draftDeck.map(function(card, index) {\r\n        return (\r\n          <img\r\n            src={card.imageUrl}\r\n            alt=\"imageUrl\"\r\n            key={index}\r\n            className=\"draftDeckCardImage cardImage\"\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DraftDeck\r\n","import React from 'react'\r\n\r\nconst SavedDeck = ({ savedDeck }) => {\r\n  return (\r\n    <div className=\"draftDeck\">\r\n      <h1 className=\"savedDeckName\">{savedDeck.name}</h1>\r\n\r\n      {savedDeck.cards.map(function(card, index) {\r\n        return (\r\n          <img\r\n            src={card.imageUrl}\r\n            alt={card.name}\r\n            key={index}\r\n            className=\"savedDeckCardImage cardImage\"\r\n          />\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavedDeck\r\n","import React from 'react'\r\n\r\nconst SavedDecksList = ({ savedDecks, showSavedDeckById }) => {\r\n  savedDecks.sort(function(a, b) {\r\n    if (a.created_at > b.created_at) return -1\r\n    if (a.created_at < b.created_at) return 1\r\n    return 0\r\n  })\r\n\r\n  return (\r\n    <div className=\"savedDecksList\">\r\n      <ul className=\"savedDecksListUl list-group\">\r\n        {savedDecks.map(function(deck) {\r\n          return (\r\n            <li\r\n              onClick={showSavedDeckById(deck.id)}\r\n              key={deck.id}\r\n              className=\"savedDecksListLi list-group-item\"\r\n            >\r\n              {deck.name}\r\n            </li>\r\n          )\r\n        })}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SavedDecksList\r\n","import React, { Component } from 'react'\r\n\r\nclass Loading extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.modifyLoadingText = this.modifyLoadingText.bind(this)\r\n\r\n    this.state = {\r\n      loadingText: 'Loading',\r\n      amountOfDots: 0,\r\n      dotsIncreasing: true,\r\n      loadingTextVisible: true\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(this.modifyLoadingText, 200)\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n\r\n  modifyLoadingText() {\r\n    let loadingText = 'Loading'\r\n\r\n    if (this.state.dotsIncreasing) {\r\n      this.setState({ amountOfDots: this.state.amountOfDots + 1 })\r\n    } else {\r\n      this.setState({ amountOfDots: this.state.amountOfDots - 1 })\r\n    }\r\n\r\n    if (this.state.dotsIncreasing && this.state.amountOfDots === 3) {\r\n      this.setState({ dotsIncreasing: false })\r\n    }\r\n\r\n    if (!this.state.dotsIncreasing && this.state.amountOfDots === 0) {\r\n      this.setState({ dotsIncreasing: true })\r\n    }\r\n\r\n    for (let i = 0; i < this.state.amountOfDots; i++) {\r\n      loadingText += '.'\r\n    }\r\n    this.setState({ loadingText })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"loading\">\r\n        <div className=\"loadingContent\">\r\n          <p>{this.state.loadingText}</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Loading\r\n","import React, { Component } from 'react'\r\nimport cardService from './services/cards'\r\nimport deckService from './services/decks'\r\nimport Card from './components/Card'\r\nimport CardList from './components/CardList'\r\nimport NavBar from './components/NavBar'\r\nimport DraftCardList from './components/DraftCardList'\r\nimport DraftDeck from './components/DraftDeck'\r\nimport SavedDeck from './components/SavedDeck'\r\nimport SavedDecksList from './components/SavedDecksList'\r\nimport Loading from './components/Loading'\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    // Bind functions\r\n    this.getCardsWithColor = this.getCardsWithColor.bind(this)\r\n    this.playDraft = this.playDraft.bind(this)\r\n    this.showImageOrCard = this.showImageOrCard.bind(this)\r\n    this.showCard = this.showCard.bind(this)\r\n    this.showCardForMobile = this.showCardForMobile.bind(this)\r\n    this.mouseOver = this.mouseOver.bind(this)\r\n    this.mouseOut = this.mouseOut.bind(this)\r\n    this.addCardToDeck = this.addCardToDeck.bind(this)\r\n    this.shuffleNewBoosters = this.shuffleNewBoosters.bind(this)\r\n    this.showDraftDeck = this.showDraftDeck.bind(this)\r\n    this.showDraftDeckWithoutEvent = this.showDraftDeckWithoutEvent.bind(this)\r\n    this.toggleDraftingInfo = this.toggleDraftingInfo.bind(this)\r\n    this.getBackToDrafting = this.getBackToDrafting.bind(this)\r\n    this.showSavedDecks = this.showSavedDecks.bind(this)\r\n    this.showSavedDeckById = this.showSavedDeckById.bind(this)\r\n    this.saveDeck = this.saveDeck.bind(this)\r\n    this.toggleShowSaveDeckForm = this.toggleShowSaveDeckForm.bind(this)\r\n    this.changeSavedDeckName = this.changeSavedDeckName.bind(this)\r\n    this.backToCardList = this.backToCardList.bind(this)\r\n\r\n    // Check if using mobile with touch\r\n    const touchsupport =\r\n      'ontouchstart' in window ||\r\n      navigator.maxTouchPoints > 0 ||\r\n      navigator.msMaxTouchPoints > 0\r\n    this.state = {\r\n      cards: [],\r\n      boosters: [],\r\n      draftDeck: [],\r\n      savedDecks: [],\r\n      sets: [],\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      loading: false,\r\n      showDraftingInfo: false,\r\n      showCard: null,\r\n      showSavedDeckForm: false,\r\n      showDeckHasBeenSavedText: false,\r\n      savedDeckToShow: null,\r\n      savedDeckName: null,\r\n      deckIsSaved: false,\r\n      cardsLeft: false,\r\n      draftSet: '',\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: 0,\r\n      savedDecksAmount: 0,\r\n      touchsupport: touchsupport\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.setState({ loading: true })\r\n\r\n    await cardService.getSets().then(response => {\r\n      const sets = response.sets.sort(function(a, b) {\r\n        if (a.releaseDate > b.releaseDate) return -1\r\n        if (a.releaseDate < b.releaseDate) return 1\r\n        return 0\r\n      })\r\n      let setsArray = sets.reduce(function(accumulator, set) {\r\n        return set.booster ? accumulator.concat(set) : accumulator\r\n      }, [])\r\n      setsArray.sort((a, b) => a.releaseDate < b.releaseDate)\r\n      this.setState({\r\n        sets: setsArray\r\n      })\r\n    })\r\n\r\n    await deckService.getAll().then(savedDecks => {\r\n      this.setState({\r\n        savedDecks: savedDecks,\r\n        savedDecksAmount: savedDecks.length,\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  // Get 5 random cards with chosen color\r\n  getCardsWithColor = color => event => {\r\n    event.preventDefault()\r\n    this.setState({ loading: true })\r\n\r\n    cardService.getColor(color).then(response => {\r\n      // Add cards to array in state and clear possible hovering settings\r\n      this.setState({\r\n        cards: response.cards,\r\n        showCard: null,\r\n        mouseOver: false,\r\n        showDraftDeck: false,\r\n        showSavedDecks: false,\r\n        showSavedDeckForm: false,\r\n        hoverImageUrl: '',\r\n        cardListColor: color,\r\n        showLinkForId: '',\r\n        savedDeckToShow: null,\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  // Get 8 boosters with 15 draft cards each for given set\r\n  playDraft = async event => {\r\n    event.preventDefault()\r\n\r\n    const draftSet = document.getElementById('draft-select').value\r\n\r\n    // Show loading text while getting the boosters from API\r\n    this.setState({\r\n      loading: true,\r\n      deckIsSaved: false,\r\n      boosters: [],\r\n      draftSet: draftSet\r\n    })\r\n\r\n    // Change value back to default\r\n    document.getElementById('draft-select').value = 'Draft'\r\n\r\n    let draftBoosters = []\r\n    // Get 8 boosters\r\n    await cardService.getDraftBoosters(draftSet).then(response => {\r\n      response.map(booster => {\r\n        return draftBoosters.push(booster.data.cards)\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      // Add draft cards to array in state and clear possible other settings\r\n      cards: [],\r\n      draftDeck: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      showSavedDeckForm: false,\r\n      showDraftingInfo: false,\r\n      cardsLeft: true,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: 1,\r\n      savedDeckToShow: null,\r\n      boosters: draftBoosters,\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  shuffleNewBoosters = async draftRound => {\r\n    // Show loading text while getting the boosters from API\r\n    this.setState({\r\n      boosters: [],\r\n      showDraftingInfo: false,\r\n      cardsLeft: true\r\n    })\r\n\r\n    let draftBoosters = []\r\n    // Get 8 boosters\r\n    await cardService.getDraftBoosters(this.state.draftSet).then(response => {\r\n      response.map(booster => {\r\n        return draftBoosters.push(booster.data.cards)\r\n      })\r\n    })\r\n\r\n    this.setState({\r\n      // Add draft cards to array in state and clear possible other settings\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      boosterIndex: 0,\r\n      draftRound: draftRound,\r\n      loading: false,\r\n      boosters: draftBoosters\r\n    })\r\n  }\r\n\r\n  // Hovering is not possible if using mobile, so when clicked with mobile, display image and button for show view\r\n  showImageOrCard = (id, imageUrl) => event => {\r\n    event.preventDefault()\r\n\r\n    // If not using mobile and clicked on a card name, show the card\r\n    if (!this.state.touchsupport) {\r\n      this.showCard(id)\r\n    } else {\r\n      // For mobile, if this card is already clicked, show the card\r\n      if (this.state.hoverImageUrl === imageUrl) {\r\n        this.setState({\r\n          mouseOver: false,\r\n          showDraftDeck: false,\r\n          showCard: null,\r\n          showLinkForId: ''\r\n        })\r\n        // If first click, show the hover image\r\n      } else {\r\n        this.setState({\r\n          mouseOver: true,\r\n          showDraftDeck: false,\r\n          showSavedDecks: false,\r\n          hoverImageUrl: imageUrl,\r\n          showCard: null,\r\n          showLinkForId: id\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  // Two almost duplicate methods because other one needs event.preventDefault() and this won't work with it\r\n  showCard = id => {\r\n    // Getting image takes a while, so show Loading... and hide it when image is retreived\r\n    this.setState({\r\n      loading: true,\r\n      hoverImageUrl: '',\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      showLinkForId: ''\r\n    })\r\n\r\n    cardService.getById(id).then(response => {\r\n      this.setState({\r\n        showCard: response.card,\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  // Without preventing default event (clicked from button) this activates straight away when clicked on a card name\r\n  showCardForMobile = id => event => {\r\n    event.preventDefault()\r\n    // Getting image takes a while, so show Loading... and hide it when image is retreived\r\n    this.setState({\r\n      loading: true,\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDecks: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: ''\r\n    })\r\n\r\n    cardService.getById(id).then(response => {\r\n      this.setState({\r\n        showCard: response.card,\r\n        loading: false\r\n      })\r\n    })\r\n  }\r\n\r\n  // On desktop show card image when hovering the name\r\n  mouseOver = imageUrl => event => {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.touchsupport) {\r\n      this.setState({\r\n        mouseOver: true,\r\n        hoverImageUrl: imageUrl\r\n      })\r\n    }\r\n  }\r\n\r\n  // Hide the card image when not hovering the name\r\n  mouseOut = event => {\r\n    event.preventDefault()\r\n\r\n    if (!this.state.touchsupport) {\r\n      this.setState({\r\n        mouseOver: false,\r\n        hoverImageUrl: ''\r\n      })\r\n    }\r\n  }\r\n\r\n  addCardToDeck = (card, boosterIndex, cardIndex) => event => {\r\n    event.preventDefault()\r\n\r\n    let boosterIndexIncrement = this.state.boosterIndex\r\n    if (boosterIndexIncrement === 7) {\r\n      boosterIndexIncrement = 0\r\n    } else {\r\n      boosterIndexIncrement += 1\r\n    }\r\n\r\n    // Remove chosen card from booster. Using index over ID because there might be duplicate cards in boosters\r\n    const boosters = this.state.boosters\r\n\r\n    // Remove one random card from every booster\r\n    boosters.map(function(booster, index) {\r\n      if (boosterIndex === index) {\r\n        booster = booster.filter((x, i) => i !== cardIndex)\r\n        return (boosters[index] = booster)\r\n      } else {\r\n        const removedIndex = Math.floor(\r\n          Math.random() * Math.floor(booster.length)\r\n        )\r\n        booster = booster.filter((x, i) => i !== removedIndex)\r\n        return (boosters[index] = booster)\r\n      }\r\n    })\r\n\r\n    this.setState({\r\n      draftDeck: this.state.draftDeck.concat(card),\r\n      boosters: boosters,\r\n      boosterIndex: boosterIndexIncrement,\r\n      showDraftingInfo: false\r\n    })\r\n\r\n    if (this.state.boosters[0].length === 0 && this.state.draftRound < 3) {\r\n      this.setState({\r\n        boosterIndex: 0,\r\n        cardsLeft: false,\r\n        loading: true\r\n      })\r\n      this.shuffleNewBoosters(this.state.draftRound + 1)\r\n    } else if (\r\n      this.state.boosters[0].length === 0 &&\r\n      this.state.draftRound === 3\r\n    ) {\r\n      this.showDraftDeckWithoutEvent()\r\n    }\r\n  }\r\n\r\n  // Button to show drafted cards\r\n  showDraftDeck = event => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: true,\r\n      showSavedDeckForm: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: '',\r\n      cardListColor: '',\r\n      showSavedDecks: false,\r\n      savedDeckToShow: null\r\n    })\r\n  }\r\n\r\n  // Cannot call upper function from this file, needs event to work\r\n  showDraftDeckWithoutEvent = () => {\r\n    this.setState({\r\n      cards: [],\r\n      showCard: null,\r\n      mouseOver: false,\r\n      showDraftDeck: true,\r\n      showSavedDeckForm: false,\r\n      hoverImageUrl: '',\r\n      showLinkForId: '',\r\n      cardListColor: '',\r\n      showSavedDecks: false,\r\n      cardsLeft: false,\r\n      loading: false\r\n    })\r\n  }\r\n\r\n  // Button to get back to drafting from viewing your so far drafted deck\r\n  getBackToDrafting = event => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showDraftDeck: false,\r\n      showSavedDeckForm: false\r\n    })\r\n  }\r\n\r\n  toggleDraftingInfo = event => {\r\n    event.preventDefault()\r\n\r\n    this.state.showDraftingInfo\r\n      ? this.setState({ showDraftingInfo: false })\r\n      : this.setState({ showDraftingInfo: true })\r\n  }\r\n\r\n  // Show drafted decks that were saved to database\r\n  showSavedDecks = event => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showSavedDecks: true,\r\n      cards: [],\r\n      mouseOver: false,\r\n      showDraftDeck: false,\r\n      showSavedDeckForm: false,\r\n      loading: false,\r\n      showDraftingInfo: false,\r\n      showCard: null,\r\n      hoverImageUrl: '',\r\n      cardListColor: '',\r\n      showLinkForId: '',\r\n      savedDeckToShow: null\r\n    })\r\n  }\r\n\r\n  // Show selected saved deck\r\n  showSavedDeckById = deckId => event => {\r\n    event.preventDefault()\r\n\r\n    deckService.getById(deckId).then(savedDeckToShow => {\r\n      this.setState({\r\n        showSavedDecks: false,\r\n        showSavedDeckForm: false,\r\n        savedDeckToShow: savedDeckToShow\r\n      })\r\n    })\r\n  }\r\n\r\n  // Save complete deck to database\r\n  saveDeck = (deckCards, deckName) => async event => {\r\n    event.preventDefault()\r\n\r\n    if (!deckName) {\r\n      alert('Name your deck!')\r\n    } else {\r\n      this.setState({ loading: true })\r\n\r\n      const newDeck = { name: deckName, cards: deckCards }\r\n\r\n      await deckService.create(newDeck).then(deck => {\r\n        this.setState({\r\n          deckIsSaved: true,\r\n          savedDeckName: deck.name,\r\n          showSavedDeckForm: false,\r\n          showDeckHasBeenSavedText: true,\r\n          loading: false\r\n        })\r\n      })\r\n      setTimeout(() => {\r\n        this.setState({\r\n          savedDeckName: null,\r\n          showDeckHasBeenSavedText: false\r\n        })\r\n      }, 5000)\r\n\r\n      // Get the saved decks from database\r\n      // If there are more than 10 saved decks, backend automatically deletes the oldest ones\r\n      await deckService.getAll().then(foundDecks => {\r\n        this.setState({\r\n          savedDecks: foundDecks,\r\n          savedDecksAmount: foundDecks.length\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  toggleShowSaveDeckForm = event => {\r\n    event.preventDefault()\r\n\r\n    if (this.state.showSavedDeckForm === false) {\r\n      this.setState({\r\n        showSavedDeckForm: true\r\n      })\r\n    } else {\r\n      this.setState({\r\n        showSavedDeckForm: false\r\n      })\r\n    }\r\n  }\r\n\r\n  changeSavedDeckName = event => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      savedDeckName: event.target.value\r\n    })\r\n  }\r\n\r\n  backToCardList = event => {\r\n    event.preventDefault()\r\n\r\n    this.setState({\r\n      showCard: null\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar\r\n          getCardsWithColor={this.getCardsWithColor}\r\n          playDraft={this.playDraft}\r\n          sets={this.state.sets}\r\n          draftDeck={this.state.draftDeck}\r\n          showDraftDeck={this.showDraftDeck}\r\n          savedDecksAmount={this.state.savedDecks.length}\r\n          showSavedDecks={this.showSavedDecks}\r\n        />\r\n\r\n        {this.state.savedDeckToShow !== null ? (\r\n          <SavedDeck savedDeck={this.state.savedDeckToShow} />\r\n        ) : null}\r\n\r\n        {this.state.showSavedDecks ? (\r\n          <SavedDecksList\r\n            savedDecks={this.state.savedDecks}\r\n            showSavedDeckById={this.showSavedDeckById}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.loading ? <Loading /> : null}\r\n\r\n        {this.state.showDraftDeck ? (\r\n          <DraftDeck\r\n            draftDeck={this.state.draftDeck}\r\n            cardsLeft={this.state.cardsLeft}\r\n            getBackToDrafting={this.getBackToDrafting}\r\n            saveDeck={this.saveDeck}\r\n            deckIsSaved={this.state.deckIsSaved}\r\n            toggleShowSaveDeckForm={this.toggleShowSaveDeckForm}\r\n            showSavedDeckForm={this.state.showSavedDeckForm}\r\n            changeSavedDeckName={this.changeSavedDeckName}\r\n            savedDeckName={this.state.savedDeckName}\r\n            showDeckHasBeenSavedText={this.state.showDeckHasBeenSavedText}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.cards.length > 0 &&\r\n        !this.state.showCard &&\r\n        !this.state.loading ? (\r\n          <CardList\r\n            cards={this.state.cards}\r\n            showCardForMobile={this.showCardForMobile}\r\n            showImageOrCard={this.showImageOrCard}\r\n            mouseOver={this.mouseOver}\r\n            mouseOut={this.mouseOut}\r\n            color={this.state.cardListColor}\r\n            showLinkForId={this.state.showLinkForId}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.boosters.length > 0 &&\r\n        !this.state.showDraftDeck &&\r\n        !this.state.showSavedDecks &&\r\n        !this.state.savedDeckToShow &&\r\n        this.state.cards.length === 0 &&\r\n        !this.state.showCard ? (\r\n          <DraftCardList\r\n            boosters={this.state.boosters}\r\n            addCardToDeck={this.addCardToDeck}\r\n            boosterIndex={this.state.boosterIndex}\r\n            showDraftingInfo={this.state.showDraftingInfo}\r\n            toggleDraftingInfo={this.toggleDraftingInfo}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.showCard !== null ? (\r\n          <Card\r\n            card={this.state.showCard}\r\n            backToCardList={this.backToCardList}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.mouseOver ? (\r\n          <div className=\"hoverImage\">\r\n            <img\r\n              src={this.state.hoverImageUrl}\r\n              alt=\"imageUrl\"\r\n              className=\"cardImage\"\r\n            />\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './styles.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}